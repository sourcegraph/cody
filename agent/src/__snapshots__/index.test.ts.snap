// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Agent > Chat > chat/submitMessage (long message) 1`] = `
"I'll create a simple Hello World function in Java for you.

\`\`\`java:src/HelloWorld.java
public class HelloWorld {
    public static void sayHello() {
        System.out.println("Hello, World!");
    }

    public static void main(String[] args) {
        sayHello();
    }
}
\`\`\`

This code creates a Java class with two methods:
1. \`sayHello()\` - A function that prints "Hello, World!"
2. \`main()\` - The entry point that calls our sayHello function

To compile and run this code, use these commands:

\`\`\`bash
javac src/HelloWorld.java
\`\`\`

\`\`\`bash
java -cp src HelloWorld
\`\`\`

The program will output: \`Hello, World!\`

This is a great starting point for Java programming. Feel free to modify the message or add more functionality to the function!"
`;

exports[`Agent > Chat > chat/submitMessage (short message) 1`] = `
{
  "model": "anthropic::2024-10-22::claude-3-5-sonnet-latest",
  "speaker": "assistant",
  "text": "Hi there! Great to meet you! I'm Cody, ready to help you with coding and development tasks. What would you like to work on together?",
}
`;

exports[`Agent > Chat > chat/submitMessage (with mock context) 1`] = `
"\`\`\`typescript:src/dog.ts
export class Dog implements Animal {
    name: string;
    isMammal = true;

    constructor(name: string) {
        this.name = name;
    }

    makeAnimalSound(): string {
        return "Woof!";
    }
}
\`\`\`"
`;

exports[`Agent > Commands > commands/explain 1`] = `
"Animal Interface

The code defines an interface called \`Animal\` which serves as a blueprint for creating animal-like objects in a programming project. Think of it like a set of requirements that any animal object must follow when it's created.

This interface specifies three key characteristics that every animal object must have:
1. A \`name\` (which is a text string representing the animal's name)
2. A method \`makeAnimalSound()\` that returns a string (which will represent the sound the animal makes)
3. A boolean property \`isMammal\` that indicates whether the animal is a mammal or not

The \`export\` keyword means this interface can be used in other files of the project, allowing different parts of the code to create animal objects that all follow the same structural rules.

For example, if someone creates a dog or cat object using this interface, they would need to provide a name, implement a method that returns the animal's sound, and specify whether it's a mammal. This ensures consistency and provides a standard way of representing animals across the entire codebase.

The interface doesn't actually create any animals itself - it's more like a contract or template that defines what information and behaviors an animal object must have when it's created in the program."
`;

exports[`Agent > Commands > commands/smell 1`] = `
"After reviewing the \`Animal\` interface in \`src/animal.ts\`, here are some constructive suggestions:

1. Optional Properties
   - Consider making \`isMammal\` an optional property using \`?\`
   - Benefit: Provides more flexibility for implementations where mammalian classification might not always be definitive
   \`\`\`typescript:src/animal.ts
   export interface Animal {
     name: string
     makeAnimalSound(): string
     isMammal?: boolean
   }
   \`\`\`

2. Add Documentation
   - Include JSDoc comments to provide clarity about the interface's purpose and properties
   - Benefit: Improves code readability and helps developers understand the interface's contract
   \`\`\`typescript:src/animal.ts
   /**
    * Represents an animal with basic characteristics
    */
   export interface Animal {
     /** The name of the animal */
     name: string

     /** Generates a characteristic sound for the animal */
     makeAnimalSound(): string

     /** Indicates whether the animal is a mammal */
     isMammal: boolean
   }
   \`\`\`

3. Consider Adding Unique Identifier
   - Introduce an optional \`id\` property to support potential database or tracking scenarios
   - Benefit: Enables easier tracking and management of animal instances
   \`\`\`typescript:src/animal.ts
   export interface Animal {
     id?: string | number
     name: string
     makeAnimalSound(): string
     isMammal: boolean
   }
   \`\`\`

4. Return Type for \`makeAnimalSound()\`
   - Explicitly specify a more precise return type, such as a specific string union or enum
   - Benefit: Provides more type safety and predictability
   \`\`\`typescript:src/animal.ts
   export enum AnimalSound {
     BARK = 'woof',
     MEOW = 'meow',
     CHIRP = 'tweet'
   }

   export interface Animal {
     name: string
     makeAnimalSound(): AnimalSound
     isMammal: boolean
   }
   \`\`\`

5. Consider Adding Species or Type Information
   - Introduce a property or generic type parameter to capture species or animal type
   - Benefit: Allows for more specific and type-safe animal representations
   \`\`\`typescript:src/animal.ts
   export interface Animal<T extends string = string> {
     name: string
     species: T
     makeAnimalSound(): string
     isMammal: boolean
   }
   \`\`\`

Summary:
The current \`Animal\` interface follows good basic design principles. The suggestions aim to enhance type safety, flexibility, and documentation without fundamentally altering the interface's core structure. The recommendations provide incremental improvements that could make the interface more robust and informative.

The code demonstrates a clean, straightforward approach to defining an animal abstraction, with clear intentions for name, sound generation, and mammalian classification."
`;
