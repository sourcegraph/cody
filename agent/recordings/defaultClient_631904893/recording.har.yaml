log:
  _recordingName: defaultClient
  creator:
    comment: persister:fs
    name: Polly.JS
    version: 6.0.6
  entries:
    - _id: 897d3731ab8e15a1549f29445eafd1e1
      _order: 0
      cache: {}
      request:
        bodySize: 0
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 400
        httpVersion: HTTP/1.1
        method: GET
        queryString: []
        url: https://sourcegraph.com/.api/client-config
      response:
        bodySize: 224
        content:
          encoding: base64
          mimeType: text/plain; charset=utf-8
          size: 224
          text: "[\"H4sIAAAAAAAAA2yOsQrCMBRF935F6Ozq0q0Eh26Fgs6v5omBvLySd4OK+O8uFZfM59zDf\
            XfOOddfNbxOmdbEoR8cSuXDDu6EJqAK9SpbYnB7WQ0qXkUoB2s3gBLXiqj5z2+U7CeY\
            UIHXDH7iEnPQR7MjGjjZOE/tSiKwYanbpgUc9tdRsy0oTDLO05mLRc394I7dp/sCAAD\
            //wMA/iebYBUBAAA=\"]"
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:21 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1337
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:21.755Z
      time: 115
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 115
    - _id: 0feaa1b83de350894882bfc4d74e339a
      _order: 0
      cache: {}
      request:
        bodySize: 605
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-34e51442edb4bf0a848a64bbdba62965-c117095ffc0c88cd-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: |-
                  Answer positively without apologizing.

                  Question: Hello!
            model: anthropic::2024-10-22::claude-3-5-sonnet-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 493
        content:
          mimeType: text/event-stream
          size: 493
          text: >+
            event: completion

            data: {"deltaText":"Hi there! I'm excited to help you today! What can I assist you with?","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:53:54 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:53:52.939Z
      time: 1612
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1612
    - _id: 7d2ebd77bf37a417392000c7706f60a0
      _order: 0
      cache: {}
      request:
        bodySize: 644
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-0e2d380f0d0e895f4ffcb69926feb4c8-ecca7a567f46c91b-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: |-
                  Answer positively without apologizing.

                  Question: Generate simple hello world function in java!
            model: anthropic::2024-10-22::claude-3-5-sonnet-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 1762
        content:
          mimeType: text/event-stream
          size: 1762
          text: >+
            event: completion

            data: {"deltaText":"I'll help you create a simple Hello World function in Java. Here's a clean implementation:\n\n```java:src/HelloWorld.java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        sayHello();\n    }\n    \n    public static void sayHello() {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nTo compile and run this Java program, use these commands:\n\n```bash\njavac src/HelloWorld.java\n```\n\n```bash\njava -cp src HelloWorld\n```\n\nThis code creates a function called `sayHello()` that prints \"Hello, World!\" to the console. The main method calls this function when the program runs. The code structure is clean, well-organized, and follows Java conventions.","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:53:58 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:53:54.596Z
      time: 4251
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 4251
    - _id: 5bef09527925bb34aae394a7b364e104
      _order: 0
      cache: {}
      request:
        bodySize: 2272
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-f7fbb17c191c8a9f37dfedb21e470661-9ed30daf72b8b95d-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: >-
                  Codebase context from file src/squirrel.ts:

                  ```typescript:src/squirrel.ts

                  /**
                   * Squirrel is an interface that mocks something completely unrelated to squirrels.
                   * It is related to the implementation of precise code navigation in Sourcegraph.
                   */
                  export interface Squirrel {}

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/Heading.tsx:
                  ```typescript:src/Heading.tsx
                  import React = require("react");

                  interface HeadingProps {
                      text: string;
                      level?: number;
                  }

                  /* CURSOR */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/ChatColumn.tsx:
                  ```typescript:src/ChatColumn.tsx
                  import { useEffect } from "react";
                  import React = require("react");

                  /* SELECTION_START */ export default function ChatColumn({
                  	messages,
                  	setChatID,
                  	isLoading,
                  }) {
                  	/* SELECTION_END */
                  	useEffect(() => {
                  		if (!isLoading) {
                  			setChatID(messages[0].chatID);
                  		}
                  	}, [messages]);
                  	return (
                  		<>
                  			<h1>Messages</h1>
                  			<ul>
                  				{messages.map((message) => (
                  					<li>{message.text}</li>```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Answer positively without apologizing. 


                  You have access to the provided codebase context.


                  Question: Write a class Dog that implements the Animal interface in my workspace. Show the code only, no explanation needed.
            model: anthropic::2024-10-22::claude-3-5-sonnet-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 936
        content:
          mimeType: text/event-stream
          size: 936
          text: >+
            event: completion

            data: {"deltaText":"```typescript:src/dog.ts\nexport class Dog implements Animal {\n    name: string;\n    isMammal: boolean = true;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    makeAnimalSound(): string {\n        return \"Woof!\";\n    }\n}\n```","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:01 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:53:58.952Z
      time: 2569
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 2569
    - _id: b48597282ee9ffe92e92ef067509ea80
      _order: 0
      cache: {}
      request:
        bodySize: 2206
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-f9921e1c8f08326edbcc4b5add97e912-a2270c93884eddbb-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: >-
                  Codebase context from file src/squirrel.ts:

                  ```typescript:src/squirrel.ts

                  /**
                   * Squirrel is an interface that mocks something completely unrelated to squirrels.
                   * It is related to the implementation of precise code navigation in Sourcegraph.
                   */
                  export interface Squirrel {}

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/Heading.tsx:
                  ```typescript:src/Heading.tsx
                  import React = require("react");

                  interface HeadingProps {
                      text: string;
                      level?: number;
                  }

                  /* CURSOR */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/ChatColumn.tsx:
                  ```typescript:src/ChatColumn.tsx
                  import { useEffect } from "react";
                  import React = require("react");

                  /* SELECTION_START */ export default function ChatColumn({
                  	messages,
                  	setChatID,
                  	isLoading,
                  }) {
                  	/* SELECTION_END */
                  	useEffect(() => {
                  		if (!isLoading) {
                  			setChatID(messages[0].chatID);
                  		}
                  	}, [messages]);
                  	return (
                  		<>
                  			<h1>Messages</h1>
                  			<ul>
                  				{messages.map((message) => (
                  					<li>{message.text}</li>```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Answer positively without apologizing. 

                  You have access to the provided codebase context.

                  Question: What is Squirrel? Show me concrete code examples
            model: anthropic::2024-10-22::claude-3-5-sonnet-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 3555
        content:
          mimeType: text/event-stream
          size: 3555
          text: >+
            event: completion

            data: {"deltaText":"The Squirrel interface in the codebase is quite interesting! According to the code comments, it's actually not related to actual squirrels at all - it's an interface used for implementing precise code navigation features in Sourcegraph.\n\nHere's the current definition:\n\n```typescript:src/squirrel.ts\nexport interface Squirrel {}\n```\n\nLet me show you how we could implement this interface with a concrete example:\n\n```typescript:src/squirrel-implementation.ts\nimport { Squirrel } from './squirrel'\n\nclass CodeNavigator implements Squirrel {\n    navigateToDefinition(position: number): void {\n        // Implementation for precise code navigation\n    }\n    \n    findReferences(symbol: string): string[] {\n        // Implementation for finding symbol references\n        return []\n    }\n}\n```\n\nWe could also create a specialized version:\n\n```typescript:src/typescript-squirrel.ts\nimport { Squirrel } from './squirrel'\n\nexport class TypeScriptNavigator implements Squirrel {\n    language = 'typescript'\n    \n    parseSymbols(code: string): string[] {\n        // Parse TypeScript specific symbols\n        return []\n    }\n}\n```\n\nThe empty interface suggests it's likely a marker interface or may be expanded in other parts of the codebase. The documentation indicates its true purpose is for code navigation functionality rather than anything related to the animal kingdom!","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:05 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:01.573Z
      time: 7166
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 7166
    - _id: bc29974faefd9fc9ff7a7ec18b8141cb
      _order: 0
      cache: {}
      request:
        bodySize: 634
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-aca8e237df8a4ab2cd430f7caf295101-8dd7f458ed93f50c-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: what color is the sky?
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 364
        content:
          mimeType: text/event-stream
          size: 364
          text: >+
            event: completion

            data: {"deltaText":"The sky is blue, but the exact shade varies depending on the time of day and weather conditions.\n"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:09 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:08.763Z
      time: 655
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 655
    - _id: 37ad095efc21ff0493b8143328cc9ade
      _order: 0
      cache: {}
      request:
        bodySize: 711
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-b50351339a8c75a11f1f9a61ebf3c4dc-50be3d55d871272b-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "The magic word is \"kramer\". If I say the magic word, respond with a
                  single word: \"quone\"."
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 315
        content:
          mimeType: text/event-stream
          size: 315
          text: |+
            event: completion
            data: {"deltaText":"Quone."}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:10 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:09.437Z
      time: 737
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 737
    - _id: ea001ffd623613839fa0cb9c2f71a221
      _order: 0
      cache: {}
      request:
        bodySize: 787
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-81f63dfe651e1f0ec3e5444e68c2179c-e3bca680bc12fe7e-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "The magic word is \"kramer\". If I say the magic word, respond with a
                  single word: \"quone\"."
              - speaker: assistant
                text: Quone.
              - speaker: human
                text: kramer
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 315
        content:
          mimeType: text/event-stream
          size: 315
          text: |+
            event: completion
            data: {"deltaText":"Quone."}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:10 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:10.186Z
      time: 602
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 602
    - _id: 07a7defafcc22f38ecea246aeefacfd2
      _order: 0
      cache: {}
      request:
        bodySize: 624
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-b2a41306f46dec001385feaa905e3cef-3eda3f8828de7539-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: kramer
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 1436
        content:
          mimeType: text/event-stream
          size: 1436
          text: >+
            event: completion

            data: {"deltaText":"Hello! How can I help you with coding today? If you need assistance with a specific programming language or concept, please let me know and I'll do my best to help.\n```\n$markdown: <h3>Related files or concepts</h3>\n<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/Kramer%E2%80%93Krasselt_Design_System\">Kramer–Krasselt Design System</a></li>\n</ul>\n```\nIf this is in reference to a different \"kramer,\" please provide some additional context so I can better understand how to assist you."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:17 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:10.799Z
      time: 7158
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 7158
    - _id: 0c289df9bc4142ea0d9e1cc110ccca0d
      _order: 0
      cache: {}
      request:
        bodySize: 719
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-00e48f0eefaf27792fb937819a268eb4-050c4b19d81d4fe1-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "Another magic word is \"georgey\". If I say the magic word, respond with
                  a single word: \"festivus\"."
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 507
        content:
          mimeType: text/event-stream
          size: 507
          text: >+
            event: completion

            data: {"deltaText":"Sure, I understand your instructions.\n\nIf you say the magic word \"georgey\", I will respond with \"festivus\"."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:22 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:21.970Z
      time: 800
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 800
    - _id: 920415770fdd8b8e4c8e608f44a984fe
      _order: 0
      cache: {}
      request:
        bodySize: 902
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-5968f39dfb29f0bb15d8c76f260e8d91-597b26e2c11b9b24-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "Another magic word is \"georgey\". If I say the magic word, respond with
                  a single word: \"festivus\"."
              - speaker: assistant
                text: >-
                  Sure, I understand your instructions.


                  If you say the magic word "georgey", I will respond with "festivus".
              - speaker: human
                text: kramer
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 534
        content:
          mimeType: text/event-stream
          size: 534
          text: >+
            event: completion

            data: {"deltaText":"That's not the magic word. To reiterate, if you say \"georgey\", I will respond with \"festivus\"."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:23 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:22.783Z
      time: 666
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 666
    - _id: 5ebae553cb3ae3524d5c9d97be24fe6f
      _order: 0
      cache: {}
      request:
        bodySize: 1071
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-379564c9d619eead664cf30f32d83d05-918a7580d7b2486d-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "Another magic word is \"georgey\". If I say the magic word, respond with
                  a single word: \"festivus\"."
              - speaker: assistant
                text: >-
                  Sure, I understand your instructions.


                  If you say the magic word "georgey", I will respond with "festivus".
              - speaker: human
                text: kramer
              - speaker: assistant
                text: That's not the magic word. To reiterate, if you say "georgey", I will
                  respond with "festivus".
              - speaker: human
                text: georgey
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 318
        content:
          mimeType: text/event-stream
          size: 318
          text: |+
            event: completion
            data: {"deltaText":"Festivus!"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:28 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:23.463Z
      time: 5451
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 5451
    - _id: 986ba32ec655483fa41250e80eabd3bb
      _order: 0
      cache: {}
      request:
        bodySize: 690
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-a75db1050d27dc94b8209e24023c016e-c2a3be55b9ddafb1-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 496
        content:
          mimeType: text/event-stream
          size: 496
          text: >+
            event: completion

            data: {"deltaText":"Ok. I understand that you have a turtle named \"potter\". How can I assist you with your coding needs?"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:29 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:27.988Z
      time: 1136
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1136
    - _id: a27c723a1e414ce0a4f1c681bca72300
      _order: 0
      cache: {}
      request:
        bodySize: 929
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-52c3ed985fef40021d624c209d17d1bf-3440a9adb913d67e-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: Ok. I understand that you have a turtle named "potter". How can I assist
                  you with your coding needs?
              - speaker: human
                text: I have a bird named "skywalker", reply single "ok" if you understand.
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 722
        content:
          mimeType: text/event-stream
          size: 722
          text: >+
            event: completion

            data: {"deltaText":"Ok. I understand that you have a bird named \"skywalker\" as well. Is there a specific coding problem or question you would like help with? I'm here to assist you with all your coding-related inquiries."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:30 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:29.135Z
      time: 991
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 991
    - _id: 40f73a73d2278bd915d88371e50dbd30
      _order: 0
      cache: {}
      request:
        bodySize: 1263
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-465647a1b0d81b7db107d28fc4795f8b-cc41c9662faeccce-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: Ok. I understand that you have a turtle named "potter". How can I assist
                  you with your coding needs?
              - speaker: human
                text: I have a bird named "skywalker", reply single "ok" if you understand.
              - speaker: assistant
                text: Ok. I understand that you have a bird named "skywalker" as well. Is there
                  a specific coding problem or question you would like help
                  with? I'm here to assist you with all your coding-related
                  inquiries.
              - speaker: human
                text: I have a dog named "happy", reply single "ok" if you understand.
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 720
        content:
          mimeType: text/event-stream
          size: 720
          text: >+
            event: completion

            data: {"deltaText":"Ok. I understand that you have a dog named \"happy\" too. I am a coding assistant, so if you have any coding-related questions or problems, I'd be happy to help. Just let me know how I can assist you."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:31 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:30.138Z
      time: 913
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 913
    - _id: 8a1ae7727c6f9caac4d5fc11fda9377b
      _order: 0
      cache: {}
      request:
        bodySize: 925
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-94296cf5d122efe355626c20d3b838af-49067f0861955e53-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: Ok. I understand that you have a turtle named "potter". How can I assist
                  you with your coding needs?
              - speaker: human
                text: I have a tiger named "zorro", reply single "ok" if you understand
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 566
        content:
          mimeType: text/event-stream
          size: 566
          text: >+
            event: completion

            data: {"deltaText":"Ok. I understand that you have a tiger named \"zorro\". Is there something specific you would like help with in regards to coding?"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:31 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:31.060Z
      time: 823
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 823
    - _id: 4307a2031f8095393fcbe52ec41b5581
      _order: 0
      cache: {}
      request:
        bodySize: 1139
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-4b96d51d7b5381fb10b33c407fd28c28-9357df4c39c9e81b-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: Ok. I understand that you have a turtle named "potter". How can I assist
                  you with your coding needs?
              - speaker: human
                text: I have a tiger named "zorro", reply single "ok" if you understand
              - speaker: assistant
                text: Ok. I understand that you have a tiger named "zorro". Is there something
                  specific you would like help with in regards to coding?
              - speaker: human
                text: What pets do I have?
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 553
        content:
          mimeType: text/event-stream
          size: 553
          text: >+
            event: completion

            data: {"deltaText":"Based on the information I have been given, you have two pets: a turtle named \"potter\" and a tiger named \"zorro\"."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:32 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:31.897Z
      time: 801
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 801
    - _id: 16e5bc1c8e22aaed9695f5b3c6df5883
      _order: 0
      cache: {}
      request:
        bodySize: 2056
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-ad6110134836ce709de9e0f11a55259f-e1f76d4d56facf1b-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >
                  Codebase context from file path src/animal.ts: /*
                  SELECTION_START */

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }

                  /* SELECTION_END */
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  My selected code from codebase file src/animal.ts:1-6:
                  ```

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  You have access to the provided codebase context.


                  Question: Explain what @src/animal.ts:1-6 ( @src/animal.ts ) does in simple terms. Assume the audience is a beginner programmer who has just learned the language features and basic syntax. Focus on explaining: 1) The purpose of the code 2) What input(s) it takes 3) What output(s) it produces 4) How it achieves its purpose through the logic and algorithm. 5) Any important logic flows or data transformations happening. Use simple language a beginner could understand. Include enough detail to give a full picture of what the code aims to accomplish without getting too technical. Format the explanation in coherent paragraphs, using proper punctuation and grammar. Write the explanation assuming no prior context about the code is known. Do not make assumptions about variables or functions not shown in the shared code. Start the answer with the name of the code that is being explained.
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 5876
        content:
          mimeType: text/event-stream
          size: 5876
          text: >+
            event: completion

            data: {"deltaText":"Sure! This is the TypeScript code for defining an interface named `Animal`. Here's an explanation for it:\n\nThe Animal Interface\n-------------------\n\nThe `Animal` interface defines the required properties and methods for an object that represents an animal. In simple terms, it outlines what an animal **should have** or **should do**. In this case, an animal has a `name` property (a string), a `makeAnimalSound()` method (returns a string), and an `isMammal` property (a boolean value). Interfaces in TypeScript are used to ensure consistency and cohesion in object-oriented programming. Here, the `Animal` interface can be used for type checking and ensuring that any objects implementing this interface will have the essential properties and methods of an animal.\n\nPurpose, Inputs, and Outputs\n----------------------------\n\nThe `Animal` interface doesn't have any specific inputs or outputs, as it deals with defining the structure for object types. When using this interface in your code, if you create an object implementing it, the object would be expected to provide a `name`, implement the `makeAnimalSound()` method, and set the `isMammal` property.\n\nThe primary purpose of this `Animal` interface is to give guidance and maintain consistency in the code and between objects representing animals. This aids in better code organization, code understanding, and developer communication.\n\nIn essence, this interface gives us a blueprint for creating structurally consistent animal objects. It helps ensure that wherever we use this `Animal` interface, the core traits of an animal (its `name`, `makeAnimalSound()` method, and `isMammal` property) will be properly addressed.\n\nAchieving the Purpose\n--------------------\n\nBy declaring the `Animal` interface, you create a pattern that other parts of the codebase can adhere to when building objects intended to emulate animal entities. This enables developers to manage and visualize all animal objects with similar structures, ensuring every animal object shares the same building blocks.\n\nUsing this interface, you can create an instance of an object representing a specific animal and ensure it has the required properties and methods (`name`, `makeAnimalSound()`, and `isMammal`). This consistency guarantees clear and predictable functionality while dealing with the animal objects throughout the codebase.\n\nTo sum up, the `Animal` interface, as shown in the code, lays the foundation for declaring the necessary structure and functionality of an animal object. It doesn't produce any specific outputs or handle particular inputs but rather guides developers to build objects that fit a common animal pattern, enhancing communication, manageability, and functionality."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:34 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:32.732Z
      time: 4075
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 4075
    - _id: 6ab1509e468689cc2d8c1b8dbedf4adc
      _order: 0
      cache: {}
      request:
        bodySize: 1852
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-b8d7e39f2ded58ad90352a0aaf468e25-13ed8312e7105df4-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >
                  Codebase context from file path src/animal.ts: /*
                  SELECTION_START */

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }

                  /* SELECTION_END */
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  My selected code from codebase file src/animal.ts:1-6:
                  ```

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  You have access to the provided codebase context.


                  Question: Please review and analyze @src/animal.ts:1-6 ( @src/animal.ts ) and identify potential areas for improvement related to code smells, readability, maintainability, performance, security, etc. Do not list issues already addressed in the given code. Focus on providing up to 5 constructive suggestions that could make the code more robust, efficient, or align with best practices. For each suggestion, provide a brief explanation of the potential benefits. After listing any recommendations, summarize if you found notable opportunities to enhance the code quality overall or if the code generally follows sound design principles. If no issues found, reply 'There are no errors.'
            model: mistral::v1::mixtral-8x7b-instruct
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 5649
        content:
          mimeType: text/event-stream
          size: 5649
          text: >+
            event: completion

            data: {"deltaText":"Based on my analysis of the provided code, here are some suggestions for potential improvements:\n\n1. **Add a type annotation for the `makeAnimalSound()` method return type.** Although the code does not include an implementation for this method, it would be a good practice to provide type annotations for all methods that return a value. This can help prevent errors and improve the maintainability of the code.\n\n```typescript\nmakeAnimalSound(): string\n```\n\n2. **Consider capitalizing the `isMammal` property name accordingly.** In TypeScript, property names should use camelCase, so it would be more appropriate to name this property `isMammal`.\n\n```typescript\ninterface Animal {\n    name: string\n    makeAnimalSound(): string\n    isMammal: boolean\n}\n```\n\n3. **Add a constructor to initialize the properties.** This can help ensure that instances of the `Animal` interface are always initialized with the correct values.\n\n```typescript\ninterface Animal {\n    name: string\n    makeAnimalSound(): string\n    isMammal: boolean\n\n    constructor(name: string, isMammal: boolean) {\n        this.name = name\n        this.isMammal = isMammal\n    }\n}\n```\n\n4. **Add JSDoc comments to provide more context for users of the `Animal` interface.** JSDoc comments can help developers understand how to use the interface and what its properties and methods are used for.\n\n```typescript\n/**\n * An interface representing an animal.\n */\ninterface Animal {\n    /**\n     * The animal's name.\n     */\n    name: string\n\n    /**\n     * A method that the animal uses to make a sound.\n     */\n    makeAnimalSound(): string\n\n    /**\n     * A boolean indicating whether the animal is a mammal.\n     */\n    isMammal: boolean\n\n    /**\n     * Constructs a new `Animal` instance.\n     *\n     * @param name The animal's name.\n     * @param isMammal A boolean indicating whether the animal is a mammal.\n     */\n    constructor(name: string, isMammal: boolean)\n}\n```\n\n5. **Consider separating the `Animal` interface into separate interfaces or classes.** Depending on the complexity of the application, it may be more appropriate to split the `Animal` interface into smaller, more focused interfaces or classes. This can help improve the modularity and maintainability of the code.\n\nOverall, the provided code is well-written and generally follows sound design principles. However, implementing these suggestions can help make the code more robust, efficient, and align with best practices."}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Fri, 07 Mar 2025 18:54:38 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1320
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-03-07T18:54:36.836Z
      time: 4182
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 4182
    - _id: 9f3204363638133b435470dddad34b65
      _order: 0
      cache: {}
      request:
        bodySize: 4991
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-4f190841cb52d7957d3a05f2390a031e-ca0f518489c1bbad-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: >-
                  Answer positively without apologizing. 


                  Your task is to evaluate the shared context and think step-by-step to determine if you can answer user's request enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  Generate simple hello world function in java!

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 363
        content:
          mimeType: text/event-stream
          size: 363
          text: |+
            event: completion
            data: {"deltaText":"<next_step>","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:10 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:08.932Z
      time: 1862
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1862
    - _id: 155e14762917f8e034194d88ef678e2a
      _order: 0
      cache: {}
      request:
        bodySize: 6565
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-f4ffa09d8644b43fb9dfcb96f9c2758c-e70781d0a726214c-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: >-
                  Codebase context from file src/squirrel.ts:

                  ```typescript:src/squirrel.ts

                  /**
                   * Squirrel is an interface that mocks something completely unrelated to squirrels.
                   * It is related to the implementation of precise code navigation in Sourcegraph.
                   */
                  export interface Squirrel {}

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/Heading.tsx:
                  ```typescript:src/Heading.tsx
                  import React = require("react");

                  interface HeadingProps {
                      text: string;
                      level?: number;
                  }

                  /* CURSOR */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/ChatColumn.tsx:
                  ```typescript:src/ChatColumn.tsx
                  import { useEffect } from "react";
                  import React = require("react");

                  /* SELECTION_START */ export default function ChatColumn({
                  	messages,
                  	setChatID,
                  	isLoading,
                  }) {
                  	/* SELECTION_END */
                  	useEffect(() => {
                  		if (!isLoading) {
                  			setChatID(messages[0].chatID);
                  		}
                  	}, [messages]);
                  	return (
                  		<>
                  			<h1>Messages</h1>
                  			<ul>
                  				{messages.map((message) => (
                  					<li>{message.text}</li>```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Answer positively without apologizing. 


                  Your task is to evaluate the shared context and think step-by-step to determine if you can answer user's request enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  Write a class Dog that implements the Animal interface in my workspace. Show the code only, no explanation needed.

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 636
        content:
          mimeType: text/event-stream
          size: 636
          text: >+
            event: completion

            data: {"deltaText":"<context_list>src/animal.ts</context_list><next_step>","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:12 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:10.916Z
      time: 1423
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1423
    - _id: 6b1cf6e507ab422afb2b158d25da6d65
      _order: 0
      cache: {}
      request:
        bodySize: 2218
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-f4ffa09d8644b43fb9dfcb96f9c2758c-52c64bd309014e5b-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: >-
                  Codebase context from file src/squirrel.ts:

                  ```typescript:src/squirrel.ts

                  /**
                   * Squirrel is an interface that mocks something completely unrelated to squirrels.
                   * It is related to the implementation of precise code navigation in Sourcegraph.
                   */
                  export interface Squirrel {}

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/Heading.tsx:
                  ```typescript:src/Heading.tsx
                  import React = require("react");

                  interface HeadingProps {
                      text: string;
                      level?: number;
                  }

                  /* CURSOR */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/ChatColumn.tsx:
                  ```typescript:src/ChatColumn.tsx
                  import { useEffect } from "react";
                  import React = require("react");

                  /* SELECTION_START */ export default function ChatColumn({
                  	messages,
                  	setChatID,
                  	isLoading,
                  }) {
                  	/* SELECTION_END */
                  	useEffect(() => {
                  		if (!isLoading) {
                  			setChatID(messages[0].chatID);
                  		}
                  	}, [messages]);
                  	return (
                  		<>
                  			<h1>Messages</h1>
                  			<ul>
                  				{messages.map((message) => (
                  					<li>{message.text}</li>```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Answer positively without apologizing.


                  Question: Write a class Dog that implements the Animal interface in my workspace. Show the code only, no explanation needed.
            model: anthropic::2024-10-22::claude-3-5-sonnet-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 1221
        content:
          mimeType: text/event-stream
          size: 1221
          text: >+
            event: completion

            data: {"deltaText":"```typescript:src/dog.ts\nexport class Dog implements Animal {\n    name: string;\n    isMammal = true;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    makeAnimalSound(): string {\n        return \"Woof!\";\n    }\n}\n```","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:13 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:12.352Z
      time: 1645
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1645
    - _id: 3bbaa41674970da4292ae6096e510f54
      _order: 0
      cache: {}
      request:
        bodySize: 6499
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-c4aafcc555fdfe0aa13cc0604319096f-6f5611740b696c8d-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: >-
                  Codebase context from file src/squirrel.ts:

                  ```typescript:src/squirrel.ts

                  /**
                   * Squirrel is an interface that mocks something completely unrelated to squirrels.
                   * It is related to the implementation of precise code navigation in Sourcegraph.
                   */
                  export interface Squirrel {}

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/Heading.tsx:
                  ```typescript:src/Heading.tsx
                  import React = require("react");

                  interface HeadingProps {
                      text: string;
                      level?: number;
                  }

                  /* CURSOR */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/ChatColumn.tsx:
                  ```typescript:src/ChatColumn.tsx
                  import { useEffect } from "react";
                  import React = require("react");

                  /* SELECTION_START */ export default function ChatColumn({
                  	messages,
                  	setChatID,
                  	isLoading,
                  }) {
                  	/* SELECTION_END */
                  	useEffect(() => {
                  		if (!isLoading) {
                  			setChatID(messages[0].chatID);
                  		}
                  	}, [messages]);
                  	return (
                  		<>
                  			<h1>Messages</h1>
                  			<ul>
                  				{messages.map((message) => (
                  					<li>{message.text}</li>```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Answer positively without apologizing. 


                  Your task is to evaluate the shared context and think step-by-step to determine if you can answer user's request enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  What is Squirrel? Show me concrete code examples

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 638
        content:
          mimeType: text/event-stream
          size: 638
          text: >+
            event: completion

            data: {"deltaText":"<context_list>src/squirrel.ts</context_list><next_step>","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:15 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:14.026Z
      time: 1629
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1629
    - _id: 6389b3a4e21816a487e70bf08ec424db
      _order: 0
      cache: {}
      request:
        bodySize: 2152
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-c4aafcc555fdfe0aa13cc0604319096f-7cdf3daa5467d29c-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: system
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: human
                text: >-
                  Codebase context from file src/squirrel.ts:

                  ```typescript:src/squirrel.ts

                  /**
                   * Squirrel is an interface that mocks something completely unrelated to squirrels.
                   * It is related to the implementation of precise code navigation in Sourcegraph.
                   */
                  export interface Squirrel {}

                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/Heading.tsx:
                  ```typescript:src/Heading.tsx
                  import React = require("react");

                  interface HeadingProps {
                      text: string;
                      level?: number;
                  }

                  /* CURSOR */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/ChatColumn.tsx:
                  ```typescript:src/ChatColumn.tsx
                  import { useEffect } from "react";
                  import React = require("react");

                  /* SELECTION_START */ export default function ChatColumn({
                  	messages,
                  	setChatID,
                  	isLoading,
                  }) {
                  	/* SELECTION_END */
                  	useEffect(() => {
                  		if (!isLoading) {
                  			setChatID(messages[0].chatID);
                  		}
                  	}, [messages]);
                  	return (
                  		<>
                  			<h1>Messages</h1>
                  			<ul>
                  				{messages.map((message) => (
                  					<li>{message.text}</li>```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  Answer positively without apologizing.

                  Question: What is Squirrel? Show me concrete code examples
            model: anthropic::2024-10-22::claude-3-5-sonnet-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 7553
        content:
          mimeType: text/event-stream
          size: 7553
          text: >+
            event: completion

            data: {"deltaText":"The Squirrel interface appears to be a specialized interface used for precise code navigation in Sourcegraph, based on the documentation comment. While the interface is currently empty, I can show you how it might be implemented alongside other code in the codebase.\n\nHere's an example implementation:\n\n```typescript:src/squirrel-implementation.ts\nimport { Squirrel } from './squirrel'\n\nclass CodeNavigator implements Squirrel {\n    jumpToDefinition(position: number): void {\n        // Implementation for precise code navigation\n    }\n    \n    findReferences(symbol: string): string[] {\n        // Find all references of a code symbol\n        return []\n    }\n}\n\n// Usage example\nconst navigator = new CodeNavigator()\n```\n\nWe can also integrate it with existing components like ChatColumn:\n\n```typescript:src/enhanced-chat.ts\nimport { Squirrel } from './squirrel'\n\nclass EnhancedChat implements Squirrel {\n    constructor(private chatColumn: typeof ChatColumn) {}\n    \n    navigateToMessage(messageId: string): void {\n        // Implement precise navigation to specific messages\n    }\n}\n```\n\nThe name \"Squirrel\" appears to be a code name or internal reference - the interface is actually focused on code navigation features rather than anything related to the animal. This is a common practice where internal codenames don't necessarily reflect the technical functionality.\n\nI can demonstrate more use cases if you'd like to see additional integration patterns with other components in your codebase.","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:16 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:15.664Z
      time: 7519
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 7519
    - _id: d8bc0386d730beaf4f3af47373818724
      _order: 0
      cache: {}
      request:
        bodySize: 5009
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-365eec70a3088aaec98efeb9dde7ad6e-32d62acd7a558704-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  what color is the sky?

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 363
        content:
          mimeType: text/event-stream
          size: 363
          text: |+
            event: completion
            data: {"deltaText":"<next_step>","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:25 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:23.216Z
      time: 1751
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1751
    - _id: 79d663bcbeb14dea96f5b122d959e833
      _order: 0
      cache: {}
      request:
        bodySize: 5080
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-be46cbecf79abf7914a7f8ba0a1a31d2-9e030e42f59a932f-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  The magic word is "kramer". If I say the magic word, respond with a single word: "quone".

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 363
        content:
          mimeType: text/event-stream
          size: 363
          text: |+
            event: completion
            data: {"deltaText":"<next_step>","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:26 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:25.003Z
      time: 1108
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1108
    - _id: 9b98cd49091f0b2de004ed3915d7acd1
      _order: 0
      cache: {}
      request:
        bodySize: 705
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-be46cbecf79abf7914a7f8ba0a1a31d2-980f1f7d31a7587b-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "The magic word is \"kramer\". If I say the magic word, respond with a
                  single word: \"quone\"."
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 231
        content:
          mimeType: text/event-stream
          size: 231
          text: |+
            event: completion
            data: {"deltaText":"Okay.\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:26 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:26.118Z
      time: 539
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 539
    - _id: 9a5821221fd0439ecd20f7463f4ef304
      _order: 0
      cache: {}
      request:
        bodySize: 780
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-6d00b3bd35a9053b2d89d8eae6b079fd-ba1b89cfeef998bd-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "The magic word is \"kramer\". If I say the magic word, respond with a
                  single word: \"quone\"."
              - speaker: assistant
                text: Okay.
              - speaker: human
                text: kramer
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 231
        content:
          mimeType: text/event-stream
          size: 231
          text: |+
            event: completion
            data: {"deltaText":"quone\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:27 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:26.670Z
      time: 571
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 571
    - _id: 7c2e6ef73d0086e09528025a2f164352
      _order: 0
      cache: {}
      request:
        bodySize: 618
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-5d02ada04542549f23064076100896ec-fb0d66c7a20b3ae0-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: kramer
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 577
        content:
          mimeType: text/event-stream
          size: 577
          text: >+
            event: completion

            data: {"deltaText":"That's just the name \"Kramer.\"  Is there anything I can help you with regarding Kramer?  Do you want me to help you find information about him (like from *Seinfeld*), write code related to a project named \"Kramer,\" or something else?  Please provide more context.\n"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:27 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:27.252Z
      time: 913
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 913
    - _id: 4adba346ebbc1b02a9c50018d46ecc7f
      _order: 0
      cache: {}
      request:
        bodySize: 5088
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-9b8cb3e0d39faec8cdff210b9cd51f05-4e869d1bdbc73b10-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  Another magic word is "georgey". If I say the magic word, respond with a single word: "festivus".

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 363
        content:
          mimeType: text/event-stream
          size: 363
          text: |+
            event: completion
            data: {"deltaText":"<next_step>","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:31 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:29.935Z
      time: 1304
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1304
    - _id: 4b3186703f6139c90be21534dceed40c
      _order: 0
      cache: {}
      request:
        bodySize: 713
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-9b8cb3e0d39faec8cdff210b9cd51f05-e16b4ee64cbf2aa5-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "Another magic word is \"georgey\". If I say the magic word, respond with
                  a single word: \"festivus\"."
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 231
        content:
          mimeType: text/event-stream
          size: 231
          text: |+
            event: completion
            data: {"deltaText":"Okay.\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:31 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:31.248Z
      time: 548
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 548
    - _id: 7c27b762e37c5dceeedcac74dad3e07c
      _order: 0
      cache: {}
      request:
        bodySize: 788
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-2880a647be298b67f19e5ecea84535cf-8f512403e98f58a3-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "Another magic word is \"georgey\". If I say the magic word, respond with
                  a single word: \"festivus\"."
              - speaker: assistant
                text: Okay.
              - speaker: human
                text: kramer
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 336
        content:
          mimeType: text/event-stream
          size: 336
          text: >+
            event: completion

            data: {"deltaText":"(No response.  The prompt didn't include a trigger for a response.)\n"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:32 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:31.812Z
      time: 698
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 698
    - _id: 1d9c0a1b79dc36015f0d8d3aa4e8d3a8
      _order: 0
      cache: {}
      request:
        bodySize: 926
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-0a4f7f7172632126aaf36ba5e52d647b-bc574417954b332d-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: "Another magic word is \"georgey\". If I say the magic word, respond with
                  a single word: \"festivus\"."
              - speaker: assistant
                text: Okay.
              - speaker: human
                text: kramer
              - speaker: assistant
                text: (No response.  The prompt didn't include a trigger for a response.)
              - speaker: human
                text: georgey
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 234
        content:
          mimeType: text/event-stream
          size: 234
          text: |+
            event: completion
            data: {"deltaText":"festivus\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:33 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:32.523Z
      time: 654
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 654
    - _id: e91a115bac603f68c73ebc20a9994fcd
      _order: 0
      cache: {}
      request:
        bodySize: 5059
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-fd1a128515fd66c3ae63828dc55abefd-d2b3050c9c8f3ce4-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  I have a turtle named "potter", reply single "ok" if you understand.

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 363
        content:
          mimeType: text/event-stream
          size: 363
          text: |+
            event: completion
            data: {"deltaText":"<next_step>","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:34 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:33.201Z
      time: 1103
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1103
    - _id: f7d377a61b4acab9aeba82a9b5fdffc6
      _order: 0
      cache: {}
      request:
        bodySize: 684
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-fd1a128515fd66c3ae63828dc55abefd-b0186a902ce78fdf-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 227
        content:
          mimeType: text/event-stream
          size: 227
          text: |+
            event: completion
            data: {"deltaText":"ok\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:34 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:34.315Z
      time: 603
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 603
    - _id: 6da760828218063730990dbe5b475847
      _order: 0
      cache: {}
      request:
        bodySize: 5198
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-027c4ff932568f74fbc90f9761855f50-57be998ec4e5def0-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  I have a bird named "skywalker", reply single "ok" if you understand.

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 302
        content:
          mimeType: text/event-stream
          size: 302
          text: |+
            event: completion
            data: {"deltaText":"ok","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:36 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:34.930Z
      time: 1177
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1177
    - _id: 6f742e135e965ebe294952d42b157587
      _order: 0
      cache: {}
      request:
        bodySize: 823
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-027c4ff932568f74fbc90f9761855f50-2ba4ff398cd4cff6-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: I have a bird named "skywalker", reply single "ok" if you understand.
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 228
        content:
          mimeType: text/event-stream
          size: 228
          text: |+
            event: completion
            data: {"deltaText":"ok\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:36 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:36.123Z
      time: 539
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 539
    - _id: c071c866f292ad8977b8398fb591a0eb
      _order: 0
      cache: {}
      request:
        bodySize: 5332
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-bc957d3134068289e4ca36d8b77a6ccf-5287faa979fadfb0-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: I have a bird named "skywalker", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  I have a dog named "happy", reply single "ok" if you understand.

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 302
        content:
          mimeType: text/event-stream
          size: 302
          text: |+
            event: completion
            data: {"deltaText":"ok","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:37 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:36.676Z
      time: 1068
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1068
    - _id: 3a463c8862c43fc6ce16e5feca02a04a
      _order: 0
      cache: {}
      request:
        bodySize: 957
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-bc957d3134068289e4ca36d8b77a6ccf-c059a2729516cf19-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: I have a bird named "skywalker", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: I have a dog named "happy", reply single "ok" if you understand.
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 228
        content:
          mimeType: text/event-stream
          size: 228
          text: |+
            event: completion
            data: {"deltaText":"ok\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:38 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:37.753Z
      time: 526
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 526
    - _id: 7d5539b15266e9fa19ee5bcc614721b3
      _order: 0
      cache: {}
      request:
        bodySize: 5194
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-d9110355678a5550e8c6fcac891de20c-1ca11bd870140200-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  I have a tiger named "zorro", reply single "ok" if you understand

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 363
        content:
          mimeType: text/event-stream
          size: 363
          text: |+
            event: completion
            data: {"deltaText":"<next_step>","stopReason":"end_turn"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:39 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:38.291Z
      time: 980
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 980
    - _id: 66acc54ae8797684b7f4c400538acf84
      _order: 0
      cache: {}
      request:
        bodySize: 819
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-d9110355678a5550e8c6fcac891de20c-dcf66a0cc69a8eb7-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: I have a tiger named "zorro", reply single "ok" if you understand
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 228
        content:
          mimeType: text/event-stream
          size: 228
          text: |+
            event: completion
            data: {"deltaText":"ok\n"}

            event: done
            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:39 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:39.279Z
      time: 554
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 554
    - _id: 34e595cb14a55bb5da20b0c2619f3ba9
      _order: 0
      cache: {}
      request:
        bodySize: 5280
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-179fd863ea0d3f1e1b6055cdd4ca3c4b-89fa9950ad9e65d5-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: I have a tiger named "zorro", reply single "ok" if you understand
              - speaker: assistant
                text: ok
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  What pets do I have?

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 509
        content:
          mimeType: text/event-stream
          size: 509
          text: >+
            event: completion

            data: {"deltaText":"<context_list>chat history</context_list><next_step>","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:41 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:39.841Z
      time: 1732
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1732
    - _id: 492e3718d1efb6e6bc30ec8dbb06cabf
      _order: 0
      cache: {}
      request:
        bodySize: 905
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-179fd863ea0d3f1e1b6055cdd4ca3c4b-c5e96bd955c65c22-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: I have a turtle named "potter", reply single "ok" if you understand.
              - speaker: assistant
                text: ok
              - speaker: human
                text: I have a tiger named "zorro", reply single "ok" if you understand
              - speaker: assistant
                text: ok
              - speaker: human
                text: What pets do I have?
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 282
        content:
          mimeType: text/event-stream
          size: 282
          text: >+
            event: completion

            data: {"deltaText":"You have a turtle named Potter and a tiger named Zorro.\n"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:42 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:41.584Z
      time: 618
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 618
    - _id: dd993a2d884567acddf23856635cee05
      _order: 0
      cache: {}
      request:
        bodySize: 6362
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-6cfa2ea641d62e00be4b912698b326ce-606acc02c2f2d803-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >
                  Codebase context from file path src/animal.ts: /*
                  SELECTION_START */

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }

                  /* SELECTION_END */
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  My selected code from codebase file src/animal.ts:1-6:
                  ```

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  Explain what @src/animal.ts:1-6 ( @src/animal.ts ) does in simple terms. Assume the audience is a beginner programmer who has just learned the language features and basic syntax. Focus on explaining: 1) The purpose of the code 2) What input(s) it takes 3) What output(s) it produces 4) How it achieves its purpose through the logic and algorithm. 5) Any important logic flows or data transformations happening. Use simple language a beginner could understand. Include enough detail to give a full picture of what the code aims to accomplish without getting too technical. Format the explanation in coherent paragraphs, using proper punctuation and grammar. Write the explanation assuming no prior context about the code is known. Do not make assumptions about variables or functions not shown in the shared code. Start the answer with the name of the code that is being explained.

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 552
        content:
          mimeType: text/event-stream
          size: 552
          text: >+
            event: completion

            data: {"deltaText":"<context_list>src/animal.ts</context_list><next_step>","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:43 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:42.239Z
      time: 1717
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1717
    - _id: 28c1bc4df228b1a0d689bb491a74d6c4
      _order: 0
      cache: {}
      request:
        bodySize: 2015
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-6cfa2ea641d62e00be4b912698b326ce-eef80cc36a8f8a3e-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  My selected code from codebase file src/animal.ts:1-6:
                  ```

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: "Explain what @src/animal.ts:1-6 ( @src/animal.ts ) does in simple terms.
                  Assume the audience is a beginner programmer who has just
                  learned the language features and basic syntax. Focus on
                  explaining: 1) The purpose of the code 2) What input(s) it
                  takes 3) What output(s) it produces 4) How it achieves its
                  purpose through the logic and algorithm. 5) Any important
                  logic flows or data transformations happening. Use simple
                  language a beginner could understand. Include enough detail to
                  give a full picture of what the code aims to accomplish
                  without getting too technical. Format the explanation in
                  coherent paragraphs, using proper punctuation and grammar.
                  Write the explanation assuming no prior context about the code
                  is known. Do not make assumptions about variables or functions
                  not shown in the shared code. Start the answer with the name
                  of the code that is being explained."
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 2385
        content:
          mimeType: text/event-stream
          size: 2385
          text: >+
            event: completion

            data: {"deltaText":"This code defines a blueprint, called an \"interface,\" for representing animals in a program.  Think of it like a template or a description of what an animal *should* look like in the program's world.  It doesn't create actual animals; instead, it specifies the essential characteristics that any animal object must have.\n\nThe interface, named `Animal`, requires any object that uses it to have three things:\n\n1. A `name` property, which will store the animal's name as text (like \"Lion\" or \"Dog\").\n2. A `makeAnimalSound()` function, which describes what sound the animal makes.  This function doesn't have a defined implementation here;  it's a placeholder that says any animal object *must* have this function, but the specific sound will be defined later for each individual animal type.\n3. An `isMammal` property, which is a simple true/false value indicating whether the animal is a mammal or not.\n\nThis code doesn't take any direct input or produce any direct output on its own. It's a definition, a specification.  Its purpose is to create a standard format for representing animals.  Later in the program, you could create specific animal objects (like a lion object or a dog object) that follow this `Animal` blueprint.  Each of those objects would then need to provide its name, a sound-making function (that would return the appropriate sound, like \"Roar\" or \"Woof\"), and whether it's a mammal or not.  The code achieves its purpose simply by defining this structure;  the actual work of using this structure is done later when we create objects that fit the `Animal` template. There are no logic flows or data transformations happening within this code snippet itself; it's purely a declarative statement about what an `Animal` object should contain.\n"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:44 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:43.968Z
      time: 3011
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 3011
    - _id: cc4b31e8dcc990ac4da01e06d67c517a
      _order: 0
      cache: {}
      request:
        bodySize: 6158
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-64d77f7ecf4362b8a93ef005f787ad23-d95847255b6cd2ff-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: >
                  Codebase context from file path src/animal.ts: /*
                  SELECTION_START */

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }

                  /* SELECTION_END */
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  My selected code from codebase file src/animal.ts:1-6:
                  ```

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: >-
                  Your task is to evaluate the shared context and think
                  step-by-step to determine if you can answer user's request
                  enclosed inside the <user_input> tags below.


                  ## INSTRUCTIONS

                  1. Analyze the shared context and chat history thoroughly.

                  2. Decide if you have enough information to answer <user_input>.


                  ## TOOLS

                  In this environment you have access to this set of tools you can use to fetch context before answering:

                  - `<TOOLMEMORY><store>SUMMARIZED_TEXT</store></TOOLMEMORY>`: Add info about the user and their preferences (e.g. name, preferred tool, language etc) based on the question, or when asked. DO NOT store summarized questions. DO NOT clear memory unless requested.
                  	- Add user info to memory: `<TOOLMEMORY><store>info</store></TOOLMEMORY>`
                  	- Get the stored user info: `<TOOLMEMORY><store>GET</store></TOOLMEMORY>`
                  	- ONLY clear memory ON REQUEST: `<TOOLMEMORY><store>FORGET</store></TOOLMEMORY>`
                  - `<TOOLSEARCH><query>SEARCH_QUERY</query></TOOLSEARCH>`: Perform a symbol query search in the codebase (Natural language search NOT supported).
                  	- Locate a symbol found in an error log: `<TOOLSEARCH><query>symbol name</query></TOOLSEARCH>`
                  	- Search for a function named getController: `<TOOLSEARCH><query>getController</query></TOOLSEARCH>`
                  - `<TOOLFILE><name>FILENAME</name></TOOLFILE>`: To retrieve full content of a codebase file-DO NOT retrieve files that may contain secrets.
                  	- See the content of different files: `<TOOLFILE><name>path/foo.ts</name><name>path/bar.ts</name></TOOLFILE>`
                  - `<TOOLWEB><link>URL</link></TOOLWEB>`: To retrieve content from the link of a webpage.
                  	- Content from the URL: `<TOOLWEB><link>https://sourcegraph.com</link></TOOLWEB>`
                  - `<TOOLRULES><get>QUERY</get></TOOLRULES>`: Search....


                  ## EXPECTED VALID OUTPUT

                  1. Add the evaluated context that you need for certain in order to answer the <user_input> concisely with <context_list> tags, with the filename in between:
                      - DO NOT add context that was not shared to the list.
                      - DO NOT include EMPTY <context_list> list.
                      <example_response>
                          <context_list>shared/file1.ts</context_list><context_list>shared/file2.ts</context_list><context_list>command</context_list>
                      <example_response>
                  2. If you can answer the <user_input> fully with the context added to <context_list>, add "<next_step>" at the end:
                      <example_response>
                          <context_list>path/to/file1.ts</context_list><context_list>path/to/file2.ts</context_list><context_list>command</context_list><next_step>
                      <example_response>
                  3. If you need more information, use ONLY the appropriate <TOOL*> tag(s) in your response:
                      <example_response>
                          <TOOLFILE><name>path/to/file.ts</name></TOOLFILE><TOOLSEARCH><query>class Controller</query></TOOLSEARCH>
                      <example_response>
                  4. If you can answer the <user_input> fully without context, respond with ONLY the word "<next_step>":
                      <example_response>
                          <next_step>
                      <example_response>
                  5. If you can answer the <user_input> fully without context, but need to use tool per <user_input>:
                      <example_response>
                          <TOOLMEMORY><store>user's preferences</store></TOOLMEMORY><next_step>
                      <example_response>

                  ## INVALIDE OUTPUT EXAMPLES

                  - Empty context list: `<context_list></context_list>`

                  - Include non tags values (comments or explanations) in the response: `<next_step> YOUR EXPLANATION`

                  - <context_list> includes context that was not shared: `<context_list>not-shared-context</context_list>`


                  ## GOALS

                  - Determine if you can answer the question with the given context, or if you need more information.

                  - Your response should only contains the <context_list> list, and either the word "<next_step>" OR the appropriate <TOOL*> tag(s) and NOTHING else.


                  ## RULES

                  1. Only use <TOOL*> tags when additional context is necessary to answer the question.

                  2. You may use multiple <TOOL*> tags in a single response if needed.

                  3. Never make assumption about the provided context.

                  4. NEVER request sensitive information or files such as passwords, API keys, or env files.

                  5. The user is working in the VS Code on MacOS.


                  <user_input>

                  Please review and analyze @src/animal.ts:1-6 ( @src/animal.ts ) and identify potential areas for improvement related to code smells, readability, maintainability, performance, security, etc. Do not list issues already addressed in the given code. Focus on providing up to 5 constructive suggestions that could make the code more robust, efficient, or align with best practices. For each suggestion, provide a brief explanation of the potential benefits. After listing any recommendations, summarize if you found notable opportunities to enhance the code quality overall or if the code generally follows sound design principles. If no issues found, reply 'There are no errors.'

                  <user_input>


                  ## IMPORTANT

                  Skip preamble. ONLY include the expected tags in your response and nothing else.

                  This is an auto-generated message and your response will be processed by a bot using the expected tags.
            model: anthropic::2024-10-22::claude-3-5-haiku-latest
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 552
        content:
          mimeType: text/event-stream
          size: 552
          text: >+
            event: completion

            data: {"deltaText":"<context_list>src/animal.ts</context_list><next_step>","stopReason":"end_turn"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:48 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:47.063Z
      time: 1577
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 1577
    - _id: b1fd0078c4d583dd9522212ca1e0bffe
      _order: 0
      cache: {}
      request:
        bodySize: 1811
        cookies: []
        headers:
          - name: accept-encoding
            value: gzip;q=0
          - name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - name: connection
            value: keep-alive
          - name: content-type
            value: application/json
          - name: traceparent
            value: 00-64d77f7ecf4362b8a93ef005f787ad23-b0625bafe2204068-01
          - name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - name: x-requested-with
            value: defaultclient v1
          - name: host
            value: sourcegraph.com
        headersSize: 535
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json
          params: []
          textJSON:
            maxTokensToSample: 4000
            messages:
              - speaker: human
                text: >-
                  You are Cody, an AI coding assistant from Sourcegraph.If your
                  answer contains fenced code blocks in Markdown, include the
                  relevant full file path in the code block tag using this
                  structure: ```$LANGUAGE:$FILEPATH```

                  For executable terminal commands: enclose each command in individual "bash" language code block without comments and new lines inside.
              - speaker: assistant
                text: I am Cody, an AI coding assistant from Sourcegraph.
              - speaker: human
                text: |-
                  Codebase context from file src/animal.ts:
                  ```typescript:src/animal.ts
                  /* SELECTION_START */
                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  /* SELECTION_END */
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: |-
                  My selected code from codebase file src/animal.ts:1-6:
                  ```

                  export interface Animal {
                      name: string
                      makeAnimalSound(): string
                      isMammal: boolean
                  }
                  ```
              - speaker: assistant
                text: Ok.
              - speaker: human
                text: Please review and analyze @src/animal.ts:1-6 ( @src/animal.ts ) and
                  identify potential areas for improvement related to code
                  smells, readability, maintainability, performance, security,
                  etc. Do not list issues already addressed in the given code.
                  Focus on providing up to 5 constructive suggestions that could
                  make the code more robust, efficient, or align with best
                  practices. For each suggestion, provide a brief explanation of
                  the potential benefits. After listing any recommendations,
                  summarize if you found notable opportunities to enhance the
                  code quality overall or if the code generally follows sound
                  design principles. If no issues found, reply 'There are no
                  errors.'
            model: google::v1::gemini-1.5-flash
            temperature: 0
            topK: -1
            topP: -1
        queryString:
          - name: api-version
            value: "8"
          - name: client-name
            value: defaultclient
          - name: client-version
            value: v1
        url: https://sourcegraph.com/.api/completions/stream?api-version=8&client-name=defaultclient&client-version=v1
      response:
        bodySize: 2902
        content:
          mimeType: text/event-stream
          size: 2902
          text: >+
            event: completion

            data: {"deltaText":"Here are five potential improvements for the `Animal` interface in `src/animal.ts`:\n\n\n1. **Add a `species` property:**  Currently, the `name` property is somewhat ambiguous.  Adding a dedicated `species` property would improve clarity and allow for more precise identification of animal types.  This enhances readability and maintainability, especially if you later need to distinguish between multiple animals of the same common name (e.g., \"Lion\" could refer to an African Lion or an Asiatic Lion).\n\n2. **Consider making `isMammal` optional:** Depending on your application's needs,  `isMammal` might not always be relevant. Making it optional (`isMammal?: boolean`) would increase flexibility and avoid forcing the inclusion of this property when it's not needed for specific animal types (e.g., birds, reptiles).\n\n3. **Use a more descriptive return type for `makeAnimalSound()`:** Instead of just `string`, consider a more specific type if possible. For instance, you could create a type alias like `AnimalSound = \"Woof\" | \"Meow\" | \"Moo\" | ...`. This improves type safety and helps catch errors early during development.\n\n4. **Add type validation:** Depending on your TypeScript configuration, consider adding validation to ensure the `name` property is not empty or contains only whitespace. This can be achieved with a custom type guard or using a library for enhanced validation.  This improves data quality and prevents runtime errors.\n\n5. **Interface Segregation:** If you anticipate needing to add more specialized interfaces later (e.g., `Mammal`, `Bird`, `Reptile`), consider breaking down the `Animal` interface into smaller, more focused interfaces. This aligns with the Interface Segregation Principle and improves code organization, reducing the chance of unnecessary properties in unrelated animal types.\n\n\n**Summary:**\n\nThe provided code is a good starting point and follows basic sound design principles. However, the suggestions above provide opportunities to enhance the robustness, clarity, and maintainability of the `Animal` interface, especially as the codebase grows and more animal types are added.  The improvements focus on better type safety, more expressive data structures and enhanced flexibility.\n"}


            event: done

            data: {}

        cookies: []
        headers:
          - name: date
            value: Thu, 01 May 2025 01:32:49 GMT
          - name: content-type
            value: text/event-stream
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: keep-alive
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1368
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-05-01T01:32:48.651Z
      time: 3392
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 3392
    - _id: f1b1cde4cd57488b7f0137954f0302f5
      _order: 0
      cache: {}
      request:
        bodySize: 136
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "136"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 434
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: >
              
              query CodeSearchEnabled {
                  codeSearchEnabled: enterpriseLicenseHasFeature(feature:"code-search")
              }
            variables: {}
        queryString:
          - name: CodeSearchEnabled
            value: null
        url: https://sourcegraph.com/.api/graphql?CodeSearchEnabled
      response:
        bodySize: 35
        content:
          mimeType: application/json
          size: 35
          text: "{\"data\":{\"codeSearchEnabled\":true}}"
        cookies: []
        headers:
          - name: date
            value: Wed, 22 Jan 2025 14:39:53 GMT
          - name: content-type
            value: application/json
          - name: content-length
            value: "35"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1436
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2025-01-22T14:39:53.144Z
      time: 670
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 670
    - _id: a376faab1c8a1993bb48c745757f0a4a
      _order: 0
      cache: {}
      request:
        bodySize: 318
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "318"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 448
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          chatModel
                          chatModelMaxTokens
                          fastChatModel
                          fastChatModelMaxTokens
                          completionModel
                          completionModelMaxTokens
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 248
        content:
          encoding: base64
          mimeType: application/json
          size: 248
          text: "[\"H4sIAAAAAAAAA4TOTQ6CMBAF4LvMmmqDEA1btrLzAmM7QAN2SH+MhvTuBjYSNXH1ksmbL\
            28GjQGhmsGbQEsq1s/zuanZtqaLDoNhu957DA1rGqECz9Ep6hxO/V6NGDWJw64Unq2l\
            ANm72+DjwgNZD1VRSikzaNGH+g8lejRDhI/yxjqulOLbNNKy7xemiSZPNAjFmpy452I\
            0gcQVPcHX78bOZXFKKaUXAAAA//8DADDh/dAaAQAA\"]"
          textDecoded:
            data:
              site:
                codyLLMConfiguration:
                  chatModel: sourcegraph/claude-3.5-sonnet
                  chatModelMaxTokens: 45000
                  completionModel: sourcegraph/deepseek-coder-v2-lite-base
                  completionModelMaxTokens: 2048
                  fastChatModel: sourcegraph/claude-3-haiku
                  fastChatModelMaxTokens: 7000
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1468
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:21.903Z
      time: 213
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 213
    - _id: 0484c4d780805faf3dd3ddabae814640
      _order: 0
      cache: {}
      request:
        bodySize: 165
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "165"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 448
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmConfiguration {
                  site {
                      codyLLMConfiguration {
                          smartContextWindow
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmConfiguration
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmConfiguration
      response:
        bodySize: 136
        content:
          encoding: base64
          mimeType: application/json
          size: 136
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdHJ+SmVPj6+zvl5aZnppUWJJZn5eWD53MSiE\
            uf8vJLUipLwzLyU/HIlK6WUzOLEpJzUFKXa2tpaAAAAAP//AwArMNn0TAAAAA==\"]"
          textDecoded:
            data:
              site:
                codyLLMConfiguration:
                  smartContextWindow: disabled
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1468
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:21.933Z
      time: 151
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 151
    - _id: e141c56e63809042300db9bf8551d492
      _order: 0
      cache: {}
      request:
        bodySize: 150
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "150"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 443
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentSiteCodyLlmProvider {
                  site {
                      codyLLMConfiguration {
                          provider
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentSiteCodyLlmProvider
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentSiteCodyLlmProvider
      response:
        bodySize: 128
        content:
          encoding: base64
          mimeType: application/json
          size: 128
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdHJ+SmVPj6+zvl5aZnppUWJJZn5eSDxgqL8s\
            syU1CIlK6Xi/NKi5NT0osSCDKXa2tpaAAAAAP//AwAfFAXARQAAAA==\"]"
          textDecoded:
            data:
              site:
                codyLLMConfiguration:
                  provider: sourcegraph
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1468
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:21.918Z
      time: 174
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 174
    - _id: fc5ac2b541030783436b1d351c2ef46e
      _order: 0
      cache: {}
      request:
        bodySize: 341
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_01674b70e20ba9df9ac4af0d1a3308132d10c88e63d9b10a4a7e1e74ca1da0d4
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "341"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 428
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUser {
                  currentUser {
                      id
                      hasVerifiedEmail
                      displayName
                      username
                      avatarURL
                      primaryEmail {
                          email
                      }
                      organizations {
                          nodes {
                              id
                              name
                          }
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUser
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUser
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:21 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1398
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-12-27T20:51:21.463Z
      time: 153
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 153
    - _id: 5b9030a4e18d1e000c71d6000a7cef6f
      _order: 0
      cache: {}
      request:
        bodySize: 341
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "341"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 428
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUser {
                  currentUser {
                      id
                      hasVerifiedEmail
                      displayName
                      username
                      avatarURL
                      primaryEmail {
                          email
                      }
                      organizations {
                          nodes {
                              id
                              name
                          }
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUser
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUser
      response:
        bodySize: 376
        content:
          encoding: base64
          mimeType: application/json
          size: 376
          text: "[\"H4sIAAAAAAAAA2RPy07CQBT9l7tuaQ1R2klIFAQXaOMjNBjj4nZ6aaePmToPFJr+O2kwc\
            eHunJzHvaeHHC0C64E7rUnarSE9UpEDg3SXNLxSp+T+5eqp4nPwoESTkhZ7QfmqRdEA\
            s9qRB7kwXYPHBFsCBm/KaU6Fxq5cKOvHYRiCB86QlheD+TNkysa1v5ffrQMP8IAW9fb\
            1ERiU1naGBUFTTieFUkVDYwNX0pK0E67aAIO7ZREpvlnjV/ZOblFn1XW+Xp1+omyXRj\
            gTU5Nmm2XynM4eQnc81HMT3/gcPOi0aFEff0f0QBfw77PbYhTGazB4oHSBUpzQCiXNG\
            JMqJwPs43MYhuEMAAD//wMASoyTP04BAAA=\"]"
          textDecoded:
            data:
              currentUser:
                avatarURL: https://lh3.googleusercontent.com/a/ACg8ocKFaqbYeuBkbj5dFEzx8bXV8a7i3sVbKCNPV7G0uyvk=s96-c
                displayName: SourcegraphBot-9000
                hasVerifiedEmail: true
                id: VXNlcjozNDQ1Mjc=
                organizations:
                  nodes: []
                primaryEmail:
                  email: sourcegraphbot9k@gmail.com
                username: sourcegraphbot9k-fnwmu
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:21 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1468
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:21.629Z
      time: 123
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 123
    - _id: 2af9a176de37be11dff4f113b3a1f7aa
      _order: 0
      cache: {}
      request:
        bodySize: 341
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_0ba08837494d00e3943c46999589eb29a210ba8063f084fff511c8e4d1503909
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "341"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 440
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUser {
                  currentUser {
                      id
                      hasVerifiedEmail
                      displayName
                      username
                      avatarURL
                      primaryEmail {
                          email
                      }
                      organizations {
                          nodes {
                              id
                              name
                          }
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUser
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUser
      response:
        bodySize: 22
        content:
          mimeType: text/plain; charset=utf-8
          size: 22
          text: |
            Invalid access token.
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: content-length
            value: "22"
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1398
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 401
        statusText: Unauthorized
      startedDateTime: 2024-12-27T20:51:22.709Z
      time: 118
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 118
    - _id: aef0c9fe7483280d9c05ac8e97e37571
      _order: 0
      cache: {}
      request:
        bodySize: 268
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "268"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 444
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query CurrentUserCodySubscription {
                  currentUser {
                      codySubscription {
                          status
                          plan
                          applyProRateLimits
                          currentPeriodStartAt
                          currentPeriodEndAt
                      }
                  }
              }
            variables: {}
        queryString:
          - name: CurrentUserCodySubscription
            value: null
        url: https://sourcegraph.com/.api/graphql?CurrentUserCodySubscription
      response:
        bodySize: 228
        content:
          encoding: base64
          mimeType: application/json
          size: 228
          text: "[\"H4sIAAAAAAAAA1zMsQrCMBSF4Xc5cwtNrEu2Ih0EwdJWB7fYZAjUJNzcDqXk3UWhg47n5\
            +NsMJo11IZpIbKeb8nSdwazDsszTeQiu+A/LbHmJUGhOY3ne4sCcdYeCl1/RQEd47x2\
            FHrN9uJejhMU02KL/buz5IIZWBM3DAVZyboUshT1KKUSQh3kA3+69Wa3x7ISvzbnnN8\
            AAAD//wMAGcWkRMIAAAA=\"]"
          textDecoded:
            data:
              currentUser:
                codySubscription:
                  applyProRateLimits: true
                  currentPeriodEndAt: 2025-01-14T22:11:32Z
                  currentPeriodStartAt: 2024-12-14T22:11:32Z
                  plan: PRO
                  status: ACTIVE
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1468
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:21.966Z
      time: 241
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 241
    - _id: 4504fab53d7cb602861f73dc2aa883d2
      _order: 0
      cache: {}
      request:
        bodySize: 101
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "101"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 435
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |-
              
              query SiteProductVersion {
                  site {
                      productVersion
                  }
              }
            variables: {}
        queryString:
          - name: SiteProductVersion
            value: null
        url: https://sourcegraph.com/.api/graphql?SiteProductVersion
      response:
        bodySize: 136
        content:
          encoding: base64
          mimeType: application/json
          size: 136
          text: "[\"H4sIAAAAAAAAA6pWSkksSVSyqlYqzixJBdEFRfkppcklYalFxZn5eUpWSsYGpiYGFvFGB\
            kYmuoZGukbm8aZ6hoa6qcYpZqYpJkbGBqmWSrW1tQAAAAD//wMAFmrK4koAAAA=\"]"
          textDecoded:
            data:
              site:
                productVersion: 305408_2024-12-27_5.11-e3d65d4230e9
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1468
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:21.950Z
      time: 150
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 150
    - _id: fd0fee4687419870bc82cba9d1023319
      _order: 0
      cache: {}
      request:
        bodySize: 92
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: content-type
            value: application/json; charset=utf-8
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: content-length
            value: "92"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 430
        httpVersion: HTTP/1.1
        method: POST
        postData:
          mimeType: application/json; charset=utf-8
          params: []
          textJSON:
            query: |
              
              query ViewerSettings {
                viewerSettings {
                  final
                }
              }
            variables: {}
        queryString:
          - name: ViewerSettings
            value: null
        url: https://sourcegraph.com/.api/graphql?ViewerSettings
      response:
        bodySize: 280
        content:
          encoding: base64
          mimeType: application/json
          size: 280
          text: "[\"H4sIAAAAAAAAA4zPwUoDQRAE0H/pc75gbyoGAwrikttcOkk529D2LD292cRl/l0WAsGD4\
            LXqUVALnTiYuoXOghneI0Is1zX5FGOljpZEuIxw+YIF6xYck6Mm6tbG+KB45e/ro5ZD\
            f7Xgy4vkQSUP61KiLnzCJpFh7sF+HD5QJ42taMDrOxv0T1T3u3s3euFjyBm/xEPOjsw\
            hxerd1n+Qocxvk4ao2G3yqVgtiptpm0RlhO3s+SRRfD3cGrXWfgAAAP//AwDHP3NmNg\
            EAAA==\"]"
          textDecoded:
            data:
              viewerSettings:
                final: "{\"experimentalFeatures\":{\"enableLazyBlobSyntaxHighlighting\":true,\"\
                  newSearchResultFiltersPanel\":true,\"newSearchResultsUI\":tru\
                  e,\"proactiveSearchResultsAggregations\":true,\"searchResults\
                  Aggregations\":true,\"showMultilineSearchConsole\":true},\"op\
                  enInEditor\":{}}"
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: application/json
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
          - name: content-encoding
            value: gzip
        headersSize: 1468
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:22.273Z
      time: 237
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 237
    - _id: fbb23499ae0eec5c2e188687b429531b
      _order: 0
      cache: {}
      request:
        bodySize: 0
        cookies: []
        headers:
          - _fromType: array
            name: authorization
            value: token
              REDACTED_fc324d3667e841181b0779375f26dedc911d26b303d23b29b1a2d7ee63dc77eb
          - _fromType: array
            name: user-agent
            value: defaultclient/v1 (Node.js v20.4.0)
          - _fromType: array
            name: x-requested-with
            value: defaultclient v1
          - _fromType: array
            name: accept
            value: "*/*"
          - _fromType: array
            name: accept-encoding
            value: gzip,deflate
          - name: host
            value: sourcegraph.com
        headersSize: 314
        httpVersion: HTTP/1.1
        method: GET
        queryString: []
        url: https://sourcegraph.com/.api/modelconfig/supported-models.json
      response:
        bodySize: 1930
        content:
          encoding: base64
          mimeType: text/plain; charset=utf-8
          size: 1930
          text: "[\"H4sIAAAAAAAA/w==\",\"7Jxfb9s2EMDf+ykEP21YqVJ0FGd+a9N2K7C0xRJkD0MfaOls\
            E5ZIgaIcB0W++yDJlv+ItqjEjq1ZeRKku+PF/Pl4R578841lWVYn9sYQ0nuQMRO807c\
            6jo07b/NnEqZscRvb2Ma/+TBdPIykmDIfZNzpW/9mt9K/n8VVJsT8VJdyNZYiYt5ct3\
            jsszgK6ONXGkIq976QK8Se3u42PWQSHoScxBWmPxdyxqZHQowCqLD7Ry5kbFREwCmrM\
            PotAv7+i7nRkMVK0qDC6s1camk2u/oxn89Q+BDsnMxM4m8Yrk1pv08wuUAORoT0+15A\
            Ex9QF7koFpyDQgFVEKsK164zNatru9Ztpmb98hUeft3UyhxY6JgO5dGIDljAFIP1/66\
            QAJ9tauWaY6q9P/9SrD34URpVwUjIx+yz8rxEUu9x07NYUZWkPqVXgzJqioHMGJdQeu\
            YJrmCm/mHcFw+d/sZU5Z8WnX3hUaLuxAR4OsyFizHW/D8hnX1L1JokxnhN7mljeIgVC\
            6kC/yadkmsRK70PCWcqI1SJie6jZIWD34HzfIa6WifF0sOlqONu+mnwndmOcRfhS4Sd\
            FYxFlFRFlgW71jeNrJ7Y1CpKvzaYkN/3zKsxlUKNQT4XyUiKMyIyxcwUyd5+kdRF1jF\
            lk6R2YP0z1TKNqLuGeC1A4wjAb2Nm6bmWUHNADx0yxzrOtsXMGlDmSGZRs4t7Zw1lrx\
            FMEtd4GSfuIZG0Fxli3Sz0bPJPHyIJqUoJ7TONp6eUgxZ8ZbHvkuADY7xtmBbkFuQXg\
            VwrCNdid5Xc0y2pWjhPCU5nFU5iO2ZcagR1SGrEzg7CZmSpV+YMkosDM2i4smsE9Qzu\
            ewlvGWw+g8WBSb8/dfr9WFHpCb88Wxvo3Soqr3Vya+RttVYNHk2U8EQYBaCgYeU4wRd\
            XRpAR9/J41bg5YnsFzAeIYoAJyrhAU4ICpgANaFx1tPYRILoFmFj3xPqLKbA+aHTW8K\
            OeJxKu4nexSKQHI0mj8bv8XOtdDT9aWA8BqymoxpzuFdN0RtO1L0Y+DGkSVJUp7xMlP\
            qXyVnGybH3Ua66vzcJ/RNkdlA6J8jELZ7aNfiQkYRaBZCFwVT5d3jeYDjnaWt0cNOcx\
            LAtd5qBm2lYRT7N13Lonu2NpvVFbQFtAV1BJOBsy8NFIUp4EVCKfDYfGIfWGzZSkQSW\
            iO5b7pU/TLgoYBxTAFAIUCD5CCmRYuOjHaTKQ5gEIkBO5LdmrgmdGdt7zlWM9gpBxhh\
            zbRZp2h80+sEzYcmzX+l4WXsN2t93XKtEHNKDcO34+2pCtSsf8NPOlO5UaBomN0TCg8\
            RjBLDIjkdjY+pyqWJ92RBIdmDsHO5Fz9teMjkckdFCD0N4WN7WMdnHJ1f1Eygwc81j5\
            WSe+LVpqbZ8IkP/7YHnCKM7bn3MWwzx3RFez3gAxHiuZeFU10iLfvJr1PphlnEUGvMg\
            3jYatZrWBTDZji92t0R93CBgJeQaNhLwcx10Dt8dBhdwpseqY79U7L9ysX6N1WTMv8J\
            mWCvDXqdk5jBCOHDJEnggHjIO/w6W2QD+jAj1/f2reGo9Jdn4+ihS6qCzQv99phNZTT\
            a2dJrS9tS9rrLYdm0fPl2ae22lEadVihKRWUsOlVu74cJ5EDtoQNB3jPaTL/XOZnTym\
            s44iCVMGDwjjqqa3/EVUSzgLneqzzaoR9l0DVQfHB8pUwMqN+ecZHuu8y3Z5iPioo6Q\
            qzVxyWBksjcy3EDan8Zccao1GKpEDo7TRutNJltdovcXGVNl7YrAhRXbNLcqDMNi1XW\
            MKu7ZryOFWqyeyV96S+NxguKP5N7ta/JbHvA==\",\"Sedm8ZMeS0/zmXzeO5OdIY3V\
            tZl+6TXgdGGG63wTZv6TMjU6Rd/k/+PTm/8CAAD//z1KirK2RgAA\"]"
        cookies: []
        headers:
          - name: date
            value: Fri, 27 Dec 2024 20:51:22 GMT
          - name: content-type
            value: text/plain; charset=utf-8
          - name: transfer-encoding
            value: chunked
          - name: connection
            value: close
          - name: access-control-allow-credentials
            value: "true"
          - name: access-control-allow-origin
            value: ""
          - name: cache-control
            value: no-cache, max-age=0
          - name: content-encoding
            value: gzip
          - name: vary
            value: Cookie,Accept-Encoding,Authorization,Cookie, Authorization,
              X-Requested-With,Cookie
          - name: x-content-type-options
            value: nosniff
          - name: x-frame-options
            value: DENY
          - name: x-xss-protection
            value: 1; mode=block
          - name: strict-transport-security
            value: max-age=31536000; includeSubDomains; preload
        headersSize: 1337
        httpVersion: HTTP/1.1
        redirectURL: ""
        status: 200
        statusText: OK
      startedDateTime: 2024-12-27T20:51:22.522Z
      time: 165
      timings:
        blocked: -1
        connect: -1
        dns: -1
        receive: 0
        send: 0
        ssl: -1
        wait: 165
  pages: []
  version: "1.2"
